L_diag=L * diag(sqrt(length(A)))
L_diag
L_diag[L_diag>0]
L_diag[L_diag<0]
length(L_diag[L_diag<0])
length(L_diag[L_diag<0])==0
length(L_diag[L_diag<=0])==0
L=my_cholesky(A)
n=sqrt(length(A))
L_diag=L * diag(n)
length(L_diag[L_diag>0])==n
x=seq(from = -4*pi,to = 4*pi, length.out = 1000)
x_matrix=matrix(x,nrow = 1, ncol = length(x))
y=apply(x_matrix,1,g)
y=tapply(x_matrix,1,g)
?tapply
y=tapply(x_matrix,x_matrix,g)
y
y=tapply(x_matrix,x_matrix,g)
plot(x,y)
y=tapply(x,x,g)
x=seq(from = -4*pi,to = 4*pi, length.out = 1000)
y=tapply(x,x,g)
goto
?goto
??goto
tapply(1:5,1:5,mean)
r=3
r=3
f=function()
{
r
}
f
f()
A=c(1,2,3)
tapply(A, A, f)
f=function(i)
{
r
}
tapply(A, A, f)
f=function(i)
{
r=r+1
r
}
tapply(A, A, f)
r
f=function(i)
{
A[i]=r
r=r+1
r
}
tapply(A, A, f)
A
f=function(i)
{
eval.parent(substitute(A[i]=r))
r=r+1
r
}
f=function(i)
{
eval.parent(substitute(A[i]=r))
r=r+1
r
}
f=function(i)
{
eval.parent(substitute(A[i]=r))
r=r+1
r
}
f=function(i)
{
eval.parent(substitute(A[i]<-r))
r=r+1
r
}
tapply(A, A, f)
A
rep(1:5,times=5)
rep(1:5,each=5)
tapply(rep(1:5,times=5),rep(1:5,each=5),mean)
apply(A)
apply(A,sum)
apply(A,1,sum)
A=matrix(c(1, 0, 0.5, -0.3, 0.2, 0, 1, 0.1, 0, 0, 0.5, 0.1, 1,
0.3, 0.7, -0.3, 0, 0.3, 1, 0.4, 0.2, 0, 0.7, 0.4, 1),
nrow=5,ncol=5,byrow = TRUE)
apply(A,1,sum)
matrix(rep(1:5,times=5),nrow = 5)
matrix(rep(1:5,each=5),nrow = 5)
m1=matrix(rep(1:5,times=5),nrow = 5)
m2=matrix(rep(1:5,each=5),nrow = 5)
m1-m2>0
m1-m2>=0
(m1-m2>=0)*m1
(m1-m2>=0)*m2
m3=(m1-m2>=0)*m2
m3
m3[m3>0]
m3=(m1-m2>=0)*m1
m3[m3>0]
m3=(m1-m2<=0)*m1
m3
m3[m3>0]
set<-function(x,value){
eval.parent(substitute(x<-value))
}
set(x,5)
x
x=5
x=3
set(x,5)
x
increment<-function(x){
eval.parent(substitute(x<-x+1))
}
increment(x)
x
increment(x)
x
A
my_cholesky_item_=function(c)
{
operands=1:4
operands[1]=(c==1 && r==1) * sqrt(A[1,1])
operands[2]=(c==1 && r!=1) * 1.0 / L[c, c] * (A[r, c])
operands[3]=(c == r && c!=1 && r!=1) * my_cholesky_diagnial_item(A, L, r)
operands[4]=(c != r && c!=1 && r!=1) * my_cholesky_non_diagnial_item(A, L, r, c)
sum(operands, na.rm = TRUE)
}
my_cholesky_line=function(r)
{
tapply(1:r, 1:r, my_cholesky_item_)
}
my_cholesky_line(2)
my_cholesky_line(2)
r
r=2
tapply(1:r, 1:r, my_cholesky_item_)
my_cholesky_item_=function(c)
{
if(c==1 && r==1)
{
print(1)
}
operands=1:4
operands[1]=(c==1 && r==1) * sqrt(A[1,1])
operands[2]=(c==1 && r!=1) * 1.0 / L[c, c] * (A[r, c])
operands[3]=(c == r && c!=1 && r!=1) * my_cholesky_diagnial_item(A, L, r)
operands[4]=(c != r && c!=1 && r!=1) * my_cholesky_non_diagnial_item(A, L, r, c)
sum(operands, na.rm = TRUE)
}
tapply(1:1, 1:1, my_cholesky_item_)
tapply(1:3, 1:3, my_cholesky_item_)
tapply(1:5, 1:5, my_cholesky_item_)
r=3
tapply(1:r, 1:r, my_cholesky_item_)
r=4
tapply(1:r, 1:r, my_cholesky_item_)
r=5
tapply(1:r, 1:r, my_cholesky_item_)
r=2
tapply(1:r, 1:r, my_cholesky_item_)
r=1
tapply(1:r, 1:r, my_cholesky_item_)
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(r in 1:n)
{
L[r,1:r]=tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(r in 1:n)
{
#L[r,1:r]=
tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(r in 1:n)
{
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(r in 1:n)
{
r
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(r in 1:n)
{
r
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
for(r in 1:n)
{
r
print(r)
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(r in 1:n)
{
r
print(r)
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(r in 1:n)
{
print("print r"+r)
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(r in 1:n)
{
print("print r"+toString(r))
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
type(r)
names(r)
r=1
tapply(1:r, 1:r, my_cholesky_item_)
r=2
tapply(1:r, 1:r, my_cholesky_item_)
r=3
tapply(1:r, 1:r, my_cholesky_item_)
L[r,]=tapply(1:r, 1:r, my_cholesky_item_)
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
L
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
r=1
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
r=2
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
r=3
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
L
r=4
L
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
r=5
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
L
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(rr in 1:n)
{
r=rr
print("print r"+toString(r))
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
toString(r)
toString(r)+"asdf"
my_cholesky=function(A)
{
n =sqrt(length(A))
L = matrix(rep(0,times=n^2),nrow=n,ncol = n)
for(rr in 1:n)
{
r=rr
print(paste("print r",toString(r)))
L[r,1:r]= tapply(1:r, 1:r, my_cholesky_item_)
#for(c in 1:r)
#{
#    L[r,c]=my_cholesky_item(A,L,r,c)
#}
}
return(L)
}
my_cholesky(A)
A
my_cholesky(A)
my_cholesky_item_by_c=function(c)
{
if(c==1 && r==1)
{
print(1)
}
operands=1:4
operands[1]=(c==1 && r==1) * sqrt(A[1,1])
operands[2]=(c==1 && r!=1) * 1.0 / L[c, c] * (A[r, c])
operands[3]=(c == r && c!=1 && r!=1) * my_cholesky_diagnial_item(A, L, r)
operands[4]=(c != r && c!=1 && r!=1) * my_cholesky_non_diagnial_item(A, L, r, c)
sum(operands, na.rm = TRUE)
}
View(my_cholesky_diagnial_item)
r=1
value
#r=rr
set(r,rr)
xt=rt(100,7)
xt95=xt[xt>quantile(xt,0.05) && xt<quantile(xt,0.95)]
length(xt95)
xt=1:100
xt95=xt[xt>quantile(xt,0.05) && xt<quantile(xt,0.95)]
length(xt95)
quantile(xt,0.05)
quantile(xt,0.95)
mean(xt[xt>quantile(xt,0.05) && xt<quantile(xt,0.95)])
xt=rt(100,7)
mean(xt[xt>quantile(xt,0.05) && xt<quantile(xt,0.95)])
head(xt)
mean(xt)
xt[xt>quantile(xt,0.05) && xt<quantile(xt,0.95)]
x=1:100
mean(x)
mean(x[x>5])
mean(x[x>quantile(x,0.05)])
mean(x[x>quantile(x,0.05) && x<quantile(x,0.95)])
mean(x[x>quantile(x,0.05) & x<quantile(x,0.95)])
mean(x[x>quantile(x,0.05) && x<quantile(x,0.95)])
mean(x[x>quantile(x,0.05) & x<quantile(x,0.95)])
x=x+[1111]
x=x & [1111]
x=list(x, list(11111))
x
x=1:100
x=[1:100,11111]
x=c(1:100,11111)
x
mean(x)
mean(x[x>quantile(x,0.05) & x<quantile(x,0.95)])
mean(x[x>quantile(x,0.05) && x<quantile(x,0.95)])
x[x>quantile(x,0.05) & x<quantile(x,0.95)]
quantile(x,0.5)
quantile(x,0.5)[1]
quantile(x,0.5)$
a
quantile(x,0.5)[]
quantile(x,0.5)[,]
quantile(x,0.5)[1]
quantile(x,0.5)[1,]
quantile(x,0.5)[,1]
quantile(x,0.5)[1].value
?rbinom
rbinom(10,10,0.5)
x=rbinom(20,10,0.5)
hist(x)
x
x=rbinom(100,1,0.5)
x
x=rbinom(100,3,0.6)
x
dbinom(2:3,100,0.6)
x=rbinom(100,3,0.6)
dbinom(x)
dbinom(x, size = 2)
dbinom(x, size = 2, prob = 0.6)
len(x>=2)
length(x>=2)
x=rbinom(100,3,0.6)
x
length(x[x>=2])
x=rbinom(1000,3,0.6)
length(x[x>=2])
pbinom(q, size=1000, prob=0.6, lower.tail = TRUE, log.p = FALSE)
pbinom(q = 0.5, size=1000, prob=0.6, lower.tail = TRUE, log.p = FALSE)
qbinom(q = 0.5, size=1000, prob=0.6, lower.tail = TRUE, log.p = FALSE)
qbinom(p = 0.5, size=1000, prob=0.6, lower.tail = TRUE, log.p = FALSE)
x=rbinom(1000,5,0.6)
length(x[x>=3])
x=rbinom(1000,9,0.6)
length(x[x>=5])
pbinom(3, 5, prob = 0.6, lower.tail = TRUE, log.p = FALSE)
pbinom(4, 9, prob = 0.6, lower.tail = TRUE, log.p = FALSE)
pbinom(5, 9, prob = 0.6, lower.tail = TRUE, log.p = FALSE)
pbinom(5, 9, prob = 0.6, log.p = FALSE)
pbinom(.5, 9, prob = 0.6, log.p = FALSE)
dbinom(1,3,0.6)
dbinom(2,3,0.6)
dbinom(3,3,0.6)
sum(dbinom(2:3,3,0.6))
sum(dbinom(5:9,9,0.6))
sum(dbinom(2:3,3,0.6))
sum(dbinom(3:5,3,0.6))
sum(dbinom(3:5,5,0.6))
sum(dbinom(4:7,7,0.6))
sum(dbinom(5:9,9,0.6))
sum(dbinom(5:9,9,0.7))
hist(table(windata))
setwd("F:/DC/PontoonJavaApplication")
marks=read.csv("multiplayer_result.csv", header = T)
hist(marks)
hist(marks$threshold)
barplot(marks)
barplot(marks$marks,marks$threshold)
?barplot
plot(marks$threshold, marks$marks)
plot(marks$threshold, marks$marks, type = "b")
plot(marks$threshold, marks$marks, type = "l")
plot(marks$threshold, marks$marks, type = "bar")
?plot
plot(marks$threshold, marks$marks, type = "h")
plot(marks$threshold, marks$marks, type = "s")
plot(marks$threshold, marks$marks, type = "l")
plot(marks$threshold, marks$marks, type = "p")
plot(marks$threshold, marks$marks, type = "p", main = "Threshold and winning")
plot(marks$threshold, marks$marks, type = "p", main = "Threshold and winning", xlab = "Threshold", ylab = "Winning Times")
plot(marks$threshold, marks$marks, type = "p", main = "Threshold and winning(in 10000 games)")
plot(marks$threshold, marks$marks, type = "p", main = "MultiPlayer Threshold and winning(in 10000 games)")
setwd("F:/DC/PontoonJavaApplication")
data=read.csv("result.csv", header = T)
windata=data[data$win==1]
windata=data[data$win==1,]
hist(windata$threshold)
barplot(table( windata$threshold))
data=read.csv("result.csv", header = T)
windata=data[data$win==1]
windata=data[data$win==1,]
barplot(table( windata$threshold))
barplot(table( windata$threshold), main = "Single Player Strategy(10000 Games)" xlab="Threshold", ylab="Winning")
?barplot
barplot(table( windata$threshold), main = "Single Player Strategy(10000 Games)" xlab="Threshold", ylab="Winning")
barplot(table( windata$threshold), main = "Single Player Strategy(10000 Games)", xlab="Threshold", ylab="Winning")
barplot(table( windata$threshold), main = "Dual Strategy(10000 Games)", xlab="Threshold", ylab="Winning")
