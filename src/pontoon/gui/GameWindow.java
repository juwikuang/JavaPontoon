/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pontoon.gui;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import pontoon.Card;
import pontoon.CardType;
import pontoon.GameResultType;
import pontoon.Hand;
import pontoon.PontoonJsonParser;
import pontoon.config.config;

/**
 *
 * @author Eric
 */
public class GameWindow extends javax.swing.JFrame {

    Socket s1 = null;
    String line;
    BufferedReader is = null;
    PrintWriter os = null;
    Hand myHand = null;
    List<JLabel> labels = new ArrayList<>();

    /**
     * Creates new form GameWindow
     */
    public GameWindow() throws IOException {
        try {
            initComponents();
            labels.add(cardLabel1);
            labels.add(cardLabel2);
            labels.add(cardLabel3);
            labels.add(cardLabel4);
            labels.add(cardLabel5);
            labels.add(cardLabel6);
            labels.add(cardLabel7);
            labels.add(cardLabel8);
            InetAddress address = InetAddress.getByName(config.getServerName());
            s1 = new Socket(address, config.getPort());

            is = new BufferedReader(
                    new InputStreamReader(s1.getInputStream()));
            os = new PrintWriter(s1.getOutputStream());
        } catch (UnknownHostException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null,
                    ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        twistButton = new javax.swing.JButton();
        stickButton = new javax.swing.JButton();
        cardLabel1 = new javax.swing.JLabel();
        cardLabel2 = new javax.swing.JLabel();
        cardLabel5 = new javax.swing.JLabel();
        cardLabel4 = new javax.swing.JLabel();
        cardLabel3 = new javax.swing.JLabel();
        cardLabel6 = new javax.swing.JLabel();
        cardLabel7 = new javax.swing.JLabel();
        cardLabel8 = new javax.swing.JLabel();

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        twistButton.setText("Twist");
        twistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twistButtonActionPerformed(evt);
            }
        });

        stickButton.setText("Stick");
        stickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stickButtonActionPerformed(evt);
            }
        });

        cardLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        cardLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        cardLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        cardLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        cardLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        cardLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        cardLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        cardLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pontoon/gui/s1.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(startButton)
                        .addGap(29, 29, 29)
                        .addComponent(twistButton)
                        .addGap(26, 26, 26)
                        .addComponent(stickButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cardLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cardLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(cardLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(cardLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cardLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(cardLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(cardLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(cardLabel4)))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cardLabel1)
                    .addComponent(cardLabel2)
                    .addComponent(cardLabel3)
                    .addComponent(cardLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardLabel8)
                    .addComponent(cardLabel7)
                    .addComponent(cardLabel6)
                    .addComponent(cardLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(twistButton)
                    .addComponent(stickButton))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try {
            String server_message;
            //First message, tell the sever i am machine
            os.println("DUAL");
            os.flush();
            server_message = is.readLine();
            System.out.println("Server Response : " + server_message);
            //Second message, tell the sever i am machine
            os.println("JSON");
            os.flush();
            server_message = is.readLine();
            System.out.println("Server Response : " + server_message);
            //3rd message, tell the server to start the game
            os.println("START");
            os.flush();        // TODO add your handling code here:
            server_message = is.readLine();
            myHand = PontoonJsonParser.ToHand(server_message);
            display();

        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null,
                    ex);
        } catch (Exception ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null,
                    ex);
        }

    }//GEN-LAST:event_startButtonActionPerformed

    private void twistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twistButtonActionPerformed

        try {
            os.println("TWIST");
            os.flush();        // TODO add your handling code here:
            String server_message = is.readLine();
            myHand = PontoonJsonParser.ToHand(server_message);
            display();
            GameResultType result = PontoonJsonParser.ToGameResult(
                    server_message);
            if (!result.equals(GameResultType.Continue)) {
                JOptionPane.
                        showMessageDialog(null, result, "InfoBox: " + result,
                                JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null,
                    ex);
        } catch (Exception ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null,
                    ex);
        }
    }//GEN-LAST:event_twistButtonActionPerformed

    private void stickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stickButtonActionPerformed
        try {
            os.println("STICK");
            os.flush();        // TODO add your handling code here:
            String server_message = is.readLine();
            myHand = PontoonJsonParser.ToHand(server_message);
            GameResultType result = PontoonJsonParser.ToGameResult(
                    server_message);
            if (!result.equals(GameResultType.Continue)) {
                JOptionPane.
                        showMessageDialog(null, result, "InfoBox: " + result,
                                JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null,
                    ex);
        } catch (Exception ex) {
            Logger.getLogger(GameWindow.class.getName()).log(Level.SEVERE, null,
                    ex);
        }
    }//GEN-LAST:event_stickButtonActionPerformed

    private void display() throws Exception {
        for (JLabel l : labels) {
            l.setIcon(null);
        }

        for (int i = 0; i < myHand.getCards().size(); i++) {
            Card myCard = myHand.getCards().get(i);
            int ordinal = myCard.getOrdinal();
            CardType ct = myCard.getCardType();
            String imageName = "/pontoon/gui/cards/" + ct.toString() + (ordinal+1)
                    + ".png";
            try {
                labels.get(i).setIcon(new javax.swing.ImageIcon(getClass().
                        getResource(imageName)));
            } catch (java.lang.NullPointerException ex) {
                pontoon.PontoonLogger.logAndPrintOut(imageName);
            }

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info
                    : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    new GameWindow().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(GameWindow.class.getName()).
                            log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cardLabel1;
    private javax.swing.JLabel cardLabel2;
    private javax.swing.JLabel cardLabel3;
    private javax.swing.JLabel cardLabel4;
    private javax.swing.JLabel cardLabel5;
    private javax.swing.JLabel cardLabel6;
    private javax.swing.JLabel cardLabel7;
    private javax.swing.JLabel cardLabel8;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stickButton;
    private javax.swing.JButton twistButton;
    // End of variables declaration//GEN-END:variables
}
